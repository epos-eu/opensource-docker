#    EPOS Open Source - Local installation with Docker
#    Copyright (C) 2023  EPOS ERIC
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.'

version: '3.7'

services:
  dataportal:
    image: "${DOCKER_REGISTRY}/${DATAPORTAL_IMAGE}"
    container_name: ${PREFIX}data-portal
    ports:
      - "${DATA_PORTAL_PORT}:80"
    networks:
      - epos_network
    restart: always
    environment:
      - BASE_URL=/
      - API_HOST=http://gateway:5000/api
  gateway:
    image: "${DOCKER_REGISTRY}/${GATEWAY_IMAGE}"
    container_name: ${PREFIX}gateway
    ports:
      - "${API_PORT}:5000"
    networks:
      - epos_network
    restart: always
    environment:
      - PREFIX=${PREFIX}
      - BASECONTEXT=${BASE_CONTEXT}
      - LOAD_RESOURCES_API=${LOAD_RESOURCES_API}
      - LOAD_INGESTOR_API=${LOAD_INGESTOR_API}
      - LOAD_EXTERNAL_ACCESS_API=${LOAD_EXTERNAL_ACCESS_API}
      - LOAD_BACKOFFICE_API=${LOAD_BACKOFFICE_API}
      - LOAD_PROCESSING_API=${LOAD_PROCESSING_API}
      - LOAD_SHARING_API=${LOAD_SHARING_API}
      - IS_MONITORING_AUTH=${IS_MONITORING_AUTH}
      - IS_AAI_ENABLED=${IS_AAI_ENABLED}
      - SECURITY_KEY=${SECURITY_KEY}
      - AAI_SERVICE_ENDPOINT=${AAI_SERVICE_ENDPOINT}
    depends_on:
      resources:
        condition: service_healthy
      backoffice:
        condition: service_healthy
      ingestor:
        condition: service_healthy
      externalaccess:
        condition: service_healthy
  rabbitmq:
    image: "${MESSAGE_BUS_IMAGE}"
    container_name: ${PREFIX}rabbitmq
    volumes:
      - rabbitmq:/var/lib/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_PASS=${BROKER_USERNAME}
      - RABBITMQ_DEFAULT_USER=${BROKER_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${BROKER_VHOST}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - epos_network
  resources:
    image: "${DOCKER_REGISTRY}/${RESOURCES_SERVICE_IMAGE}"
    container_name: ${PREFIX}resources-service
    volumes:
      - resources:/resources
    networks:
      - epos_network
    restart: always
    environment:
      - BASECONTEXT=${BASE_CONTEXT}
      - FACETS_DEFAULT=${FACETS_DEFAULT}
      - FACETS_TYPE_DEFAULT=${FACETS_TYPE_DEFAULT}
      - PERSISTENCE_NAME=${PERSISTENCE_NAME}
      - POSTGRESQL_CONNECTION_STRING=jdbc:postgresql://${PREFIX}${POSTGRESQL_HOST}:${POSTGRESQL_PORT}/${POSTGRES_DB}?user=${POSTGRES_USER}&password=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_HOST=${POSTGRESQL_HOST}
      - POSTGRESQL_DBNAME=${POSTGRES_DB}
      - POSTGRESQL_USERNAME=${POSTGRES_USER}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - APIHOST=${EXECUTE_HOST}
      - APICONTEXT=${BASE_CONTEXT}${API_PATH}
      - MONITORING=${MONITORING}
      - MONITORING_URL=${MONITORING_URL}
      - MONITORING_USER=${MONITORING_USER}
      - MONITORING_PWD=${MONITORING_PWD}
      - CONNECTION_POOL_INIT_SIZE=${CONNECTION_POOL_INIT_SIZE}
      - CONNECTION_POOL_MIN_SIZE=${CONNECTION_POOL_MIN_SIZE}
      - CONNECTION_POOL_MAX_SIZE=${CONNECTION_POOL_MAX_SIZE}
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/api/resources-service/v1/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      metadatacatalogue:
        condition: service_healthy
  backoffice:
    image: "${DOCKER_REGISTRY}/${BACKOFFICE_SERVICE_IMAGE}"
    container_name: ${PREFIX}backoffice-service
    volumes:
      - backoffice:/backoffice
    networks:
      - epos_network
    restart: always
    environment:
      - PERSISTENCE_NAME=${PERSISTENCE_NAME}
      - POSTGRESQL_CONNECTION_STRING=jdbc:postgresql://${PREFIX}${POSTGRESQL_HOST}:${POSTGRESQL_PORT}/${POSTGRES_DB}?user=${POSTGRES_USER}&password=${POSTGRESQL_PASSWORD}
      - BASECONTEXT=${BASE_CONTEXT}
      - CONNECTION_POOL_INIT_SIZE=${CONNECTION_POOL_INIT_SIZE}
      - CONNECTION_POOL_MIN_SIZE=${CONNECTION_POOL_MIN_SIZE}
      - CONNECTION_POOL_MAX_SIZE=${CONNECTION_POOL_MAX_SIZE}
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/api/backoffice-service/v1/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      metadatacatalogue:
        condition: service_healthy
  ingestor:
    image: "${DOCKER_REGISTRY}/${INGESTOR_IMAGE}"
    container_name: ${PREFIX}ingestor-service
    volumes:
      - ingestor:/ingestor
    networks:
      - epos_network
    restart: always
    environment:
      - PERSISTENCE_NAME=${PERSISTENCE_NAME}
      - POSTGRESQL_CONNECTION_STRING=jdbc:postgresql://${PREFIX}${POSTGRESQL_HOST}:${POSTGRESQL_PORT}/${POSTGRES_DB}?user=${POSTGRES_USER}&password=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_HOST=${POSTGRESQL_HOST}
      - POSTGRESQL_DBNAME=${POSTGRES_DB}
      - POSTGRESQL_USERNAME=${POSTGRES_USER}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - INGESTOR_HASH=${INGESTOR_HASH}
      - BASECONTEXT=${BASE_CONTEXT}
      - CONNECTION_POOL_INIT_SIZE=${CONNECTION_POOL_INIT_SIZE}
      - CONNECTION_POOL_MIN_SIZE=${CONNECTION_POOL_MIN_SIZE}
      - CONNECTION_POOL_MAX_SIZE=${CONNECTION_POOL_MAX_SIZE}
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/api/ingestor-service/v1/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      metadatacatalogue:
        condition: service_healthy
  externalaccess:
    image: "${DOCKER_REGISTRY}/${EXTERNAL_ACCESS_IMAGE}"
    container_name: ${PREFIX}external-access-service
    volumes:
      - externalaccess:/externalaccess
    networks:
      - epos_network
    restart: always
    environment:
      - BROKER_HOST=${BROKER_HOST}
      - BROKER_USERNAME=${BROKER_USERNAME}
      - BROKER_PASSWORD=${BROKER_PASSWORD}
      - BROKER_VHOST=${BROKER_VHOST}
      - BASECONTEXT=${BASE_CONTEXT}
      - PERSISTENCE_NAME=${PERSISTENCE_NAME}
      - POSTGRESQL_CONNECTION_STRING=jdbc:postgresql://${PREFIX}${POSTGRESQL_HOST}:${POSTGRESQL_PORT}/${POSTGRES_DB}?user=${POSTGRES_USER}&password=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_HOST=${POSTGRESQL_HOST}
      - POSTGRESQL_DBNAME=${POSTGRES_DB}
      - POSTGRESQL_USERNAME=${POSTGRES_USER}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - APIHOST=${EXECUTE_HOST}
      - APICONTEXT=${BASE_CONTEXT}${API_PATH}
      - CONNECTION_POOL_INIT_SIZE=${CONNECTION_POOL_INIT_SIZE}
      - CONNECTION_POOL_MIN_SIZE=${CONNECTION_POOL_MIN_SIZE}
      - CONNECTION_POOL_MAX_SIZE=${CONNECTION_POOL_MAX_SIZE}
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/api/external-access-service/v1/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
    depends_on:
      metadatacatalogue:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  converter:
    image: "${DOCKER_REGISTRY}/${CONVERTER_IMAGE}"
    container_name: ${PREFIX}converter-service
    volumes:
      - converter:/converter
    networks:
      - epos_network
    restart: always
    environment:
      - BROKER_HOST=${BROKER_HOST}
      - BROKER_USERNAME=${BROKER_USERNAME}
      - BROKER_PASSWORD=${BROKER_PASSWORD}
      - BROKER_VHOST=${BROKER_VHOST}
      - PERSISTENCE_NAME=${PERSISTENCE_NAME}
      - POSTGRESQL_CONNECTION_STRING=jdbc:postgresql://${PREFIX}${POSTGRESQL_HOST}:${POSTGRESQL_PORT}/${POSTGRES_DB}?user=${POSTGRES_USER}&password=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_HOST=${POSTGRESQL_HOST}
      - POSTGRESQL_DBNAME=${POSTGRES_DB}
      - POSTGRESQL_USERNAME=${POSTGRES_USER}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - CONNECTION_POOL_INIT_SIZE=${CONNECTION_POOL_INIT_SIZE}
      - CONNECTION_POOL_MIN_SIZE=${CONNECTION_POOL_MIN_SIZE}
      - CONNECTION_POOL_MAX_SIZE=${CONNECTION_POOL_MAX_SIZE}
    depends_on:
      rabbitmq:
        condition: service_healthy
  metadatacatalogue:
    restart: always
    image: "${DOCKER_REGISTRY}/${METADATA_DB_IMAGE}"
    container_name: ${PREFIX}metadata-catalogue
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - psqldata:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL","pg_isready"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - epos_network
volumes:
  rabbitmq:
    external: false
  resources:
    external: false
  backoffice:
    external: false
  ingestor:
    external: false
  externalaccess:
    external: false
  converter:
    external: false
  psqldata:
    external: false
networks:
  epos_network:
    name: ${PREFIX}